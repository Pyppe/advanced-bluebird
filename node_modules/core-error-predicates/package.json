{
  "name": "core-error-predicates",
  "version": "1.0.3",
  "description": "Error predicate functions for operational errors thrown by node core",
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/petkaantonov/core-error-predicates.git"
  },
  "keywords": [
    "error",
    "errors",
    "patternmatching",
    "dsl"
  ],
  "author": {
    "name": "Petka Antonov",
    "email": "petka_antonov@hotmail.com",
    "url": "https://github.com/petkaantonov/"
  },
  "license": "MIT",
  "devDependencies": {
    "mocha": "^2.1.0"
  },
  "readmeFilename": "README.md",
  "files": [
    "LICENSE",
    "index.js"
  ],
  "readme": "#Installation\n\n    npm install core-error-predicates\n\n#Introduction\n\nError predicate functions for operational errors thrown by node core.\n\nPredicate functions take an error object as argument and return true if the error object matches. This useful for instance when using [bluebird catch filters](https://github.com/petkaantonov/bluebird/blob/master/API.md#catchfunction-errorclassfunction-predicate-function-handler---promise) or in the future when the JavaScript `catch` clauses will be able to take filter/predicate function parameters.\n\nExample using [bluebird](https://github.com/petkaantonov/bluebird/):\n\n```js\nrequire(\"core-error-predicates\").globalize();\nfs.readFileAsync(\"test.txt\", \"utf8\").then(function(contents) {\n    console.log(\"file contents:\", contents);\n})\n.catch(FileNotFoundError, function(e) {\n    console.log(\"file test.txt does not exist\");\n})\n.catch(FileAccessError, function(e) {\n    console.log(\"no permissions to access test.txt\");\n});\n```\n\n#API\n\nThe module exports various error predicates and the `.globalize()` method.\n\nThe `.globalize()` method makes all the predicate functions available in global scope for convenience. If the name is already taken for a predicate in global scope, it will not be overwritten.\n\n##Error predicates\n\n - [`FileNotFoundError`](#filenotfounderror)\n - [`FileAccessError`](#fileaccesserror)\n - [`EOFError`](#eoferror)\n - [`UnknownHostError`](#unknownhosterror)\n - [`SocketError`](#socketerror)\n - [`ProtocolError`](#protocolerror)\n - [`FileSystemError`](#filesystemerror)\n - [`ConnectError`](#connecterror)\n - [`BindError`](#binderror)\n - [`AddressNotFoundError`](#addressnotfounderror)\n - [`NetworkError`](#networkerror)\n - [`SSLError`](#sslerror)\n\n#####`FileNotFoundError`\n\nWhen the error's code matches one of:\n\n - `ENOENT`\n\n#####`FileAccessError`\n\nWhen the error's code matches one of:\n\n - `EACCES`\n - `EPERM`\n\n#####`EOFError`\n\nWhen the error's code matches one of:\n\n - `EOF`\n\n#####`UnknownHostError`\n\nWhen the error's code matches one of:\n\n - `EADDRINFO`\n\n#####`SocketError`\n\nWhen the error's code matches one of:\n\n - `EISCONN`\n - `ENOTCONN`\n - `ENOTSOCK`\n - `ENOTSUP`\n - `EPROTOTYPE`\n - `EAIFAMNOSUPPORT`\n - `EAISERVICE`\n\n#####`ProtocolError`\n\nWhen the error's code matches one of:\n\n- `EPROTO`\n- `EPROTONOSUPPORT`\n- `EPROTOTYPE`\n\n#####`FileSystemError`\n\nWhen the error's code matches one of:\n\n - `EBUSY`\n - `ENOENT`\n - `EOF`\n - `EACCES`\n - `EAGAIN`\n - `EBADF`\n - `EMFILE`\n - `ENOTDIR`\n - `EISDIR`\n - `EEXIST`\n - `ENAMETOOLONG`\n - `EPERM`\n - `ELOOP`\n - `ENOTEMPTY`\n - `ENOSPC`\n - `EIO`\n - `EROFS`\n - `ENODEV`\n - `ESPIPE`\n - `ECANCELED`\n - `ENFILE`\n - `EXDEV`\n\n#####`ConnectError`\n\nWhen the error's code matches one of:\n\n - `ECONNABORTED`\n - `ECONNREFUSED`\n - `ECONNRESET`\n - `ETIMEDOUT`\n\n#####`BindError`\n\nWhen the error's code matches one of:\n\n - `EADDRNOTAVAIL`\n\n#####`AddressNotFoundError`\n\nWhen the error's code matches one of:\n\n - `ENOTFOUND`\n\n#####`NetworkError`\n\nWhen the error's code matches one of:\n\n - `EADDRINFO`\n - `EADDRNOTAVAIL`\n - `EAFNOSUPPORT`\n - `EALREADY`\n - `ECONNABORTED`\n - `ECONNREFUSED`\n - `ECONNRESET`\n - `EDESTADDRREQ`\n - `EHOSTUNREACH`\n - `EISCONN`\n - `EMSGSIZE`\n - `ENETDOWN`\n - `ENETUNREACH`\n - `ENONET`\n - `ENOTCONN`\n - `ENOTSOCK`\n - `ENOTSUP`\n - `EPIPE`\n - `EPROTO`\n - `EPROTONOSUPPORT`\n - `EPROTOTYPE`\n - `ETIMEDOUT`\n - `EAIFAMNOSUPPORT`\n - `EAISERVICE`\n - `EAISOCKTYPE`\n - `ESHUTDOWN`\n - `ENOTFOUND`\n\n#####`SSLError`\n\nWhen the error's message begins with `\"SSL Error:\"`.\n\n#License\n\nThe MIT License (MIT)\n\nCopyright (c) 2015 Petka Antonov\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:</p>\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "gitHead": "742e29d13171ed11c029b093a65cf49075ee0f10",
  "bugs": {
    "url": "https://github.com/petkaantonov/core-error-predicates/issues"
  },
  "homepage": "https://github.com/petkaantonov/core-error-predicates#readme",
  "_id": "core-error-predicates@1.0.3",
  "_shasum": "4e9c582ee7aacc9723501195a143451c37361784",
  "_from": "core-error-predicates@>=1.0.3 <2.0.0"
}
